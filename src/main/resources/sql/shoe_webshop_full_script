DROP DATABASE IF EXISTS sql_shoe_webshop;
CREATE DATABASE sql_shoe_webshop;
USE sql_shoe_webshop;
SET sql_safe_updates = 0;
SET GLOBAL log_bin_trust_function_creators = 1;
-- DONE!

CREATE TABLE customer (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    phone_number INT NOT NULL,
    email VARCHAR(50) UNIQUE NULL,
    password BLOB NOT NULL,
    social_security_number VARCHAR(10) NOT NULL,
    address VARCHAR(50) NOT NULL,
    fk_city_id INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
CREATE INDEX IX_customer_Last_name ON customer (last_name);
CREATE INDEX IX_customer_full_name ON customer (first_name ,last_name);
-- Man vill kunna söker ofta på förnamn och efternamn tillsammans

CREATE TABLE city (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    city_name VARCHAR(30) UNIQUE NOT NULL,
    zip_code INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE product (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    product_name varchar(30),
    price_sek DOUBLE,
    -- valt att göra valutaomvandligen i backend-programmet istället
    stock INT default 5,
    fk_color_id INT,
    fk_size_id INT,
    fk_brand_id INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE color (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    color VARCHAR(30) UNIQUE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE category (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(50) UNIQUE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE size (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    eu DOUBLE,
    uk DOUBLE,
    us DOUBLE,
    cm DOUBLE,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE brand (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    brand_name VARCHAR(50) UNIQUE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE product_category (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    fk_product_id INT,
    fk_category_id INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    date DATE NOT NULL,
    time TIME NOT NULL,
    fk_customer_id INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE orders_product (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    fk_orders_id INT,
    fk_product_id INT,
    product_price DOUBLE,
    quantity INT,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE product_review (
    id INT NOT NULL AUTO_INCREMENT  PRIMARY KEY ,
    fk_product_id int,
    fk_customer_id int,
    fk_rating_id int,
    review varchar(16000),
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE rating (
    id INT NOT NULL AUTO_INCREMENT  PRIMARY KEY ,
    rating_text varchar(20) UNIQUE NOT NULL,
	rating_number int UNIQUE NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE not_in_stock (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
fk_product_id INT,
date_out_of_stock DATE NOT NULL
);

-- add all foreign keys

ALTER TABLE customer
ADD FOREIGN KEY(fk_city_id) REFERENCES city(id);

ALTER TABLE product
ADD FOREIGN KEY(fk_size_id) REFERENCES size(id),
ADD FOREIGN KEY(fk_brand_id) REFERENCES brand(id) ON DELETE CASCADE,
ADD FOREIGN KEY(fk_color_id) REFERENCES color(id);

-- när vi tar bort ett brand så tar vi bort alla producter som ingår i de märket också
-- för vi vill inte ha några brandfria skor i våran shop

ALTER TABLE product_category
ADD FOREIGN KEY (fk_product_id) REFERENCES product(id) ON DELETE SET NULL,
ADD FOREIGN KEY (fk_category_id) REFERENCES category(id);

ALTER TABLE orders
ADD FOREIGN KEY (fk_customer_id) REFERENCES customer(id) ON DELETE SET NULL;

ALTER TABLE orders_product
ADD FOREIGN KEY (fk_orders_id) REFERENCES orders(id) ON DELETE SET NULL,
ADD FOREIGN KEY (fk_product_id) REFERENCES product(id) ON DELETE SET NULL;

ALTER TABLE product_review
ADD FOREIGN KEY (fk_product_id) REFERENCES product(id) ON DELETE CASCADE,
ADD FOREIGN KEY (fk_customer_id) REFERENCES customer(id) ON DELETE SET NULL,
ADD FOREIGN KEY (fk_rating_id) REFERENCES rating(id);

ALTER TABLE not_in_stock
ADD FOREIGN KEY (fk_product_id) REFERENCES product(id);

INSERT INTO city (city_name) VALUES
('stockholm'),
('funäsdalen'),
('luleå'),
('gävle'),
('uppsala'),
('rättvik');

INSERT INTO customer (first_name, last_name, phone_number, email, password, social_security_number, address, fk_city_id) VALUES
('oscar','forss', '0703455445', 'oscar@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '9014321234', 'sliepnervägen', (SELECT id FROM city WHERE city_name = 'stockholm')),
('patrik','melander', '0703236545', 'patrik@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '8709421234', 'bromma', (SELECT id FROM city WHERE city_name = 'stockholm')),
('cribb','grännby', '0703876513', 'cribb@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '8509221234', 'blackeberg', (SELECT id FROM city WHERE city_name = 'funäsdalen')),
('stefan','henning', '0703233314', 'stefan@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '8210221234', 'vikingavägen', (SELECT id FROM city WHERE city_name = 'gävle')),
('julia','wingsteadts', '0732344549', 'julia@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '9603321234', 'huddingevägen', (SELECT id FROM city WHERE city_name = 'stockholm')),
('sigrun','dottir', '0703231945', 'sigrun@email.com',AES_ENCRYPT('1234',UNHEX(SHA2('key',512))), '8106201234', 'älvsjövägen', (SELECT id FROM city WHERE city_name = 'rättvik'));

-- to decode the password
-- SELECT password,cast(aes_decrypt(password,UNHEX(SHA2('key',512))) AS CHAR(100)) FROM sql_shoe_webshop.customer;
-- SELECT password,aes_decrypt(password,UNHEX(SHA2('key',512))) FROM sql_shoe_webshop.customer;

INSERT INTO color (color) VALUES
('svart'),
('brun'),
('beige'),
('grå'),
('vit'),
('blå'),
('grön'),
('gul'),
('orange'),
('röd'),
('rosa'),
('lila'),
('flerfärgad');

INSERT INTO size (eu, uk, us, cm) VALUES
('32','0.5','1','20'),
('33','1','1.5','20.5'),
('34','2','2.5','21.5'),
('35','2.5','3','22'),
('36','4','4.5','22.6'),
('37','4.5','5','23.2'),
('38','5.5','6','23.9'),
('39','6.5','7','24.5'),
('40','7','7.5','25.2'),
('41','7.5','8','25.9'),
('42','8','8.5','26.5'),
('43','8.5','9','27.2'),
('44','10','10.5','27.9'),
('45','11','11.5','28.5'),
('46','12','12.5','29.2'),
('47','13','13.5','29.8');

INSERT INTO brand (brand_name) VALUES
('adidas'),
('nike'),
('armani'),
('reebok'),
('puma'),
('lacoste'),
('new balance'),
('ecco'),
('dc'),
('mishael kors');

INSERT INTO product (product_name, price_sek, fk_color_id, fk_size_id, fk_brand_id) VALUES
('flex runner', '399', '1','1','2'),
('flex runner', '399', '1','2','2'),
('flex runner', '399', '1','3','2'),
('flex runner', '399', '1','4','2'),
('flex runner', '399', '1','5','2'),

('solar boost', '1699', '12','5','1'),
('solar boost', '1699', '12','6','1'),
('solar boost', '1699', '12','7','1'),
('solar boost', '1699', '12','8','1'),
('solar boost', '1699', '12','9','1'),
('solar boost', '1699', '12','10','1'),

('ultra boost', '1999', '3','10','1'),
('ultra boost', '1999', '3','11','1'),
('ultra boost', '1999', '3','12','1'),
('ultra boost', '1999', '3','13','1'),
('ultra boost', '1999', '3','14','1'),
('ultra boost', '1999', '3','15','1'),
('ultra boost', '1999', '3','16','1'),

('pegasus', '1299', '1','6','2'),
('pegasus', '1299', '1','7','2'),
('pegasus', '1299', '1','8','2'),
('pegasus', '1299', '1','9','2'),
('pegasus', '1299', '1','10','2'),
('pegasus', '1299', '1','11','2'),
('pegasus', '1299', '1','12','2'),

('Vomero', '1499', '1','10','2'),
('Vomero', '1499', '1','11','2'),
('Vomero', '1499', '1','12','2'),
('Vomero', '1499', '1','13','2'),
('Vomero', '1499', '1','14','2'),
('Vomero', '1499', '1','15','2'),
('Vomero', '1499', '1','16','2'),

('offroad','799','1','5','8'),
('offroad','799','1','6','8'),
('offroad','799','1','7','8'),
('offroad','799','1','8','8'),
('offroad','799','1','9','8'),

('lace-up','3499','2','10','3'),
('lace-up','3499','2','11','3'),
('lace-up','3499','2','12','3'),
('lace-up','3499','2','13','3'),
('lace-up','3499','2','14','3'),
('lace-up','3499','2','15','3'),
('lace-up','3499','2','16','3'),

('lace-up','3499','1','10','3'),
('lace-up','3499','1','11','3'),
('lace-up','3499','1','12','3'),
('lace-up','3499','1','13','3'),
('lace-up','3499','1','14','3'),
('lace-up','3499','1','15','3'),
('lace-up','3499','1','16','3'),

('keke','1500','1','6','10'),
('keke','1500','1','7','10'),
('keke','1500','1','8','10'),
('keke','1500','1','9','10'),
('keke','1500','1','10','10'),

('air max fusion', '549', '5','1','2'),
('air max fusion', '549', '5','2','2'),
('air max fusion', '549', '5','3','2'),
('air max fusion', '549', '5','4','2'),
('air max fusion', '549', '5','5','2'),

('questar', '799', '1','5','1'),
('questar', '799', '1','6','1'),
('questar', '799', '1','7','1'),
('questar', '799', '1','8','1'),
('questar', '799', '1','9','1'),

('kaptir','849','5','6','1'),
('kaptir','849','5','7','1'),
('kaptir','849','5','8','1'),
('kaptir','849','5','9','1'),
('kaptir','849','5','10','1'),

('tanjun','749','5','10','2'),
('tanjun','749','5','11','2'),
('tanjun','749','5','12','2'),
('tanjun','749','5','13','2'),
('tanjun','749','5','14','2'),
('tanjun','749','5','15','2');

INSERT INTO category (category_name) VALUES
('löparsko'),
('sandal'),
('klacksko'),
('sneaker'),
('barn'),
('herr'),
('dam'),
('finsko');

INSERT INTO product_category(fk_product_id, fk_category_id) VALUES
(1,1),(2,1),(3,1),(4,1),(5,1),
(1,5),(2,5),(3,5),(4,5),(5,5),

(6,1),(7,1),(8,1),(9,1),(10,1),(11,1),
(6,7),(7,7),(8,7),(9,7),(10,7),(11,7),

(12,1),(13,1),(14,1),(15,1),(16,1),(17,1),(18,1),
(12,6),(13,6),(14,6),(15,6),(16,6),(17,6),(18,6),

(19,1),(20,1),(21,1),(22,1),(23,1),(24,1),(25,1),
(19,7),(20,7),(21,7),(22,7),(23,7),(24,7),(25,7),

(26,1),(27,1),(28,1),(29,1),(30,1),(31,1),(32,1),
(26,6),(27,6),(28,6),(29,6),(30,6),(31,6),(32,6),

(33,2),(34,2),(35,2),(36,2),(37,2),
(33,7),(34,7),(35,7),(36,7),(37,7),

(38,8),(39,8),(40,8),(41,8),(42,8),(43,8),(44,8),
(38,6),(39,6),(40,6),(41,6),(42,6),(43,6),(44,6),

(45,8),(46,8),(47,8),(48,8),(49,8),(50,8),(51,8),
(45,6),(46,6),(47,6),(48,6),(49,6),(50,6),(51,6),

(52,3),(53,3),(54,3),(55,3),(56,3),
(52,7),(53,7),(54,7),(55,7),(56,7),

(57,4),(58,4),(59,4),(60,4),(61,4),
(57,5),(58,5),(59,5),(60,5),(61,5),

(62,4),(63,4),(64,4),(65,4),(66,4),
(62,7),(63,7),(64,7),(65,7),(66,7),

(67,4),(68,4),(69,4),(70,4),(71,4),
(67,7),(68,7),(69,7),(70,7),(71,7),

(72,4),(73,4),(74,4),(75,4),(76,4),(77,4),
(72,6),(73,6),(74,6),(75,6),(76,6),(77,6);

INSERT INTO orders (id, date, time, fk_customer_id) VALUES (1,'2020-01-13','17:30', (SELECT id FROM customer WHERE first_name = 'oscar'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (2,'2020-02-12','17:30', (SELECT id FROM customer WHERE first_name = 'oscar'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (3,'2020-01-13','17:30', (SELECT id FROM customer WHERE first_name = 'patrik'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (4,'2020-03-13','17:30', (SELECT id FROM customer WHERE first_name = 'patrik'));

INSERT INTO orders (id, date, time, fk_customer_id) VALUES (5,'2020-01-13','17:30', (SELECT id FROM customer WHERE first_name = 'cribb'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (6,'2020-03-13','17:30', (SELECT id FROM customer WHERE first_name = 'cribb'));

INSERT INTO orders (id, date, time, fk_customer_id) VALUES (7, '2019-07-13','17:30', (SELECT id FROM customer WHERE first_name = 'stefan'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (8, '2021-02-01','17:30', (SELECT id FROM customer WHERE first_name = 'stefan'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (9, '2020-06-13','17:30', (SELECT id FROM customer WHERE first_name = 'julia'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (10, '2021-01-13','17:30', (SELECT id FROM customer WHERE first_name = 'julia'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (11, '2020-08-16','17:30', (SELECT id FROM customer WHERE first_name = 'sigrun'));
INSERT INTO orders (id, date, time, fk_customer_id) VALUES (12, '2018-01-13','17:30', (SELECT id FROM customer WHERE first_name = 'sigrun'));

INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (1,2, (SELECT price_sek FROM product where id =1), 2),(1,5, (SELECT price_sek FROM product where id =1), 2),(1,12, (SELECT price_sek FROM product where id =12), 2);
INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (2,35, (SELECT price_sek FROM product where id =35), 1),(2,3, (SELECT price_sek FROM product where id =3), 2),(2,15, (SELECT price_sek FROM product where id =15), 2);
INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (3,35, (SELECT price_sek FROM product where id =35), 1),(3,5, (SELECT price_sek FROM product where id =5), 2),(3,12, (SELECT price_sek FROM product where id =12), 2);
INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (4,1, (SELECT price_sek FROM product where id =1), 2),(4,1, (SELECT price_sek FROM product where id =1), 2),(4,1, (SELECT price_sek FROM product where id =1), 2);
INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (5,2, (SELECT price_sek FROM product where id =2), 2),(5,7, (SELECT price_sek FROM product where id =7), 2),(5,17, (SELECT price_sek FROM product where id =17), 2);
INSERT INTO orders_product(fk_orders_id, fk_product_id, product_price, quantity) VALUES (6,11, (SELECT price_sek FROM product where id =11), 2),(6,13, (SELECT price_sek FROM product where id =13), 2),(6,12, (SELECT price_sek FROM product where id =12), 2);
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (7,1, (select price_sek from product where id = 1), 2 ),(7,2, (select price_sek from product where id = 2), 1 );
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (8,4, (select price_sek from product where id = 4), 5 ),(8,8, (select price_sek from product where id = 8), 2 );
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (9,5, (select price_sek from product where id = 5), 6 ),(9,9, (select price_sek from product where id = 9), 1 );
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (10,10, (select price_sek from product where id = 10), 2 ),(10,13, (select price_sek from product where id = 13), 3 );
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (11,1, (select price_sek from product where id = 1), 1);
INSERT INTO orders_product (fk_orders_id, fk_product_id, product_price, quantity) values (12,57, (select price_sek from product where id = 57), 1);

INSERT INTO rating (rating_text, rating_number) VALUES
('missnöjd',1),
('inte nöjd',2),
('ganska nöjd',3),
('nöjd',4),
('mycket nöjd',5);

INSERT INTO product_review (fk_product_id,fk_customer_id,fk_rating_id,review) VALUES
(4,1,4,'Väldigt nöjd med kvalitet samt storlek'),
(7,1,3,'Bra produkt till bra pris'),
(8,1,4,'Fint sko, underbar färg'),
(74,1,4,'Underbar att gå i'),
(54,1,3,'mycket fin utformad sko'),
(4,2,2,'helt ok sko'),
(8,2,1,'gräslig färg och "fitt" på foten'),
(54,2,1,'tråkig sko, värdelös i färgen'),
(18,2,4,'bästa köpet på hemsidan!'),
(14,2,2,'ok, inget speciellt med denna sko'),
(14,3,1,'Sämst jag någonsin köpt, inte värt priset!'),
(6,3,2,'Ok, vara, storlek stämmmer bra'),
(18,5,4,'Bra produkt!'),
(5,6,1,'Sämsta skon ever!'),
(22,6,3,'Fint sko, älskar färgen'),
(24,6,2,'ok, kvalitet. Fin färg');

-- ----------------------------------------
-- ----- TRIGGER -----------------------
-- ----------------------------------------

-- G SQL
-- Vi vill även kunna kolla upp hur ofta en viss produkt säljer slut. Skapa därför en trigger som lägger in
-- en rad i en tabell som heter Slutilager om en produkt tar slut i lager. Slutilager skall innehålla datum
-- och produktId

DROP TRIGGER IF EXISTS out_of_stock;
DELIMITER //
CREATE TRIGGER out_of_stock
AFTER UPDATE ON product
FOR EACH ROW
BEGIN
	IF (NEW.stock = 0) THEN
		INSERT INTO not_in_stock(fk_product_id, date_out_of_stock)
        VALUES (OLD.id, CURRENT_DATE());
	END IF;
END //
DELIMITER ;


DROP FUNCTION IF EXISTS average_rating_for_product;
-- ---------------------------------------
-- ----- FUNCTIONS -----------------------
-- ---------------------------------------

-- VG SQL
-- Skapa en funktion som tar ett produktId som parameter och returnerar medelbetyget för den
-- produkten. Om du inte har sifferbetyg sedan innan, lägg till dessa, så att en siffra motsvarar ett av de
-- skriftliga betygsvärdena

DELIMITER $$
CREATE FUNCTION average_rating_for_product(product_id INT)
RETURNS DOUBLE
BEGIN
	DECLARE average_score DOUBLE;
	SELECT AVG(rating.rating_number) INTO average_score
    FROM product_review
    JOIN rating ON product_review.fk_rating_id = rating.id
    GROUP BY product_review.fk_product_id
    HAVING product_review.fk_product_id = product_id;
    RETURN IFNULL(average_score,0);
END $$
DELIMITER ;

DROP FUNCTION IF EXISTS new_order;
DELIMITER //
CREATE FUNCTION new_order (customer_id INT)
RETURNS INT
BEGIN
DECLARE new_order_id INT DEFAULT 0;
	INSERT INTO orders (date, time, fk_customer_id) VALUES (CURRENT_DATE(),CURRENT_TIME(), customer_id);
        SET new_order_id = LAST_INSERT_ID();
		 RETURN new_order_id;
END//
DELIMITER ;

DROP FUNCTION IF EXISTS customer_exists;
DELIMITER //
CREATE FUNCTION customer_exists(input_customer_id INT)
RETURNS BOOLEAN
BEGIN
	DECLARE customer_exsits BOOLEAN;
	SELECT COUNT(*) INTO customer_exsits
	FROM customer WHERE customer.id = input_customer_id;
RETURN customer_exsits;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS product_exists;
DELIMITER //
CREATE FUNCTION product_exists(input_product_id INT)
RETURNS BOOLEAN
BEGIN
DECLARE product_exists BOOLEAN;
SELECT COUNT(*) INTO product_exists
FROM product WHERE product.id = input_product_id;
RETURN product_exists;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS  product_in_stock;
DELIMITER //
CREATE FUNCTION product_in_stock(input_product_id INT)
RETURNS BOOLEAN
BEGIN
DECLARE product_in_stock BOOLEAN;
SELECT SUM(stock) INTO product_in_stock
FROM product WHERE product.id = input_product_id;
RETURN product_in_stock;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS current_order_exists;
DELIMITER //
CREATE FUNCTION current_order_exists(input_orders_id INT)
RETURNS BOOLEAN
BEGIN
DECLARE order_exaits BOOLEAN;
SELECT COUNT(*) INTO order_exaits
FROM orders WHERE orders.id = input_orders_id;
RETURN  order_exaits;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS is_product_in_current_order;
DELIMITER //
CREATE FUNCTION is_product_in_current_order(input_orders_id INT ,input_product_id INT)
RETURNS BOOLEAN
BEGIN
DECLARE is_product_in_order BOOLEAN;
SELECT COUNT(*) INTO is_product_in_order
FROM orders_product WHERE fk_product_id = input_product_id AND fk_orders_id = input_orders_id;
RETURN is_product_in_order;
END //
DELIMITER ;



DROP FUNCTION IF EXISTS rating_exists;
DELIMITER //
CREATE FUNCTION rating_exists(input_rating_id INT)
RETURNS BOOLEAN
BEGIN
DECLARE rating_exists BOOLEAN;
SELECT COUNT(*) INTO rating_exists
FROM rating WHERE rating.id = input_rating_id;
RETURN rating_exists;
END //
DELIMITER ;

USE sql_shoe_webshop;

-- VG SQL
-- Skapa en vy som visar medelbetyget i siffror och i text för samtliga produkter (om en produkt inte
-- har fått något betyg så skall den ändå visas, med null eller tomt värde, i medelbetyg).

DROP VIEW IF EXISTS average_rating_all_products;
CREATE VIEW average_rating_all_products AS
SELECT product.id,  average_rating_for_product(product.id) AS avg_score, (SELECT rating_text FROM rating WHERE rating_number = floor(avg_score)) AS rating_text, review FROM product
LEFT JOIN product_review ON product.id = fk_product_id
LEFT JOIN rating ON product_review.fk_rating_id = rating.id
GROUP BY product.id
ORDER BY avg_score DESC;

-- ----------------------------------------
-- ---------- STORED PROCEDURE ------------
-- ----------------------------------------

-- Use addToCart
-- CALL addToCart(1,45,1); -- customer does not exist
-- CALL addToCart(1,1,3000); -- product does not exist
-- CALL addToCart(1000,1,1);
-- CALL remove_form_cart(1,1,74);

-- G SQL
-- Skapa en stored procedure ”AddToCart”. Denna procedur skall ta kundid, beställningsid och
-- produktid som inparametrar. (Beroende på hur din implementation ser ut kan du behöva använda
-- andra värden som inparametrar, justera i så fall parameterlistan för att kunna peka ut en produkt,
-- kund och beställning.) AddToCart ska uppfylla följande:
-- • Om beställningen inte finns eller om vi skickar in null som beställningsid ska en ny beställning skapas och produkten läggas till i den.
-- • Om beställningen redan finns ska produkten läggas till i beställningen.
-- • Om beställningen finns och produkten redan finns i den ska vi lägga till ytterligare ett exemplar av produkten i beställningen.
-- • För varje produkt som blir tillagd i en beställning ska lagerantalet av produkten minska.
-- • Använd dig av transaktioner och felhantering

DROP PROCEDURE IF EXISTS addToCart;
DELIMITER //
CREATE PROCEDURE addToCart (orders_id INT, customer_id INT, product_id INT)
add_to_cart: BEGIN
DECLARE new_order_id INT;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
		ROLLBACK;
        SELECT('SQLEXCEPTION, changes not saved') AS MESSAGE;
END;
START TRANSACTION;
		-- KOLLAR OM KUNDEN FINNS
		IF NOT customer_exists(customer_id) THEN
			SELECT('Error: customer doesnt exist') AS MESSAGE;
				LEAVE add_to_cart;
		-- KOLLAR OM PRODUCTEN FINNS
        ELSEIF NOT product_exists(product_id) THEN
			SELECT('Error: product doesnt exist') AS MESSAGE;
				LEAVE add_to_cart;
		-- KOLLAR OM PRODUCTEN FINNS I LAGER
		ELSEIF product_in_stock(product_id) = 0 THEN
			SELECT('Error: product not in stock') AS MESSAGE;
				LEAVE add_to_cart;
		ELSE
			-- KOLLAR OM ORDERN INTE FINNS
			IF NOT current_order_exists(orders_id) THEN
				INSERT INTO orders(fk_customer_id, date, time) VALUES (customer_id, CURRENT_DATE(), CURRENT_TIME());
					SET new_order_id = LAST_INSERT_ID();
				INSERT INTO orders_product(fk_orders_id, fk_product_id, quantity, product_price)
					VALUES (orders_id, product_id, 1,(SELECT price_sek FROM product WHERE product.id = product_id));
				SELECT('Message: New product added to order') AS MESSAGE;
			-- OM ORDERN FINNS
            ELSE
				-- OM PRODUCTEN FINNS I ORDER
				IF is_product_in_current_order(orders_id, product_id) THEN
					UPDATE orders_product SET quantity = (quantity) + 1
						WHERE fk_orders_id = orders_id AND fk_product_id = product_id;
				SELECT('Message: Added 1 more product') AS MESSAGE;
				-- OM PRODUKTEN INTE FINNS I ORDER
				ELSE
					INSERT INTO orders_product(fk_orders_id, fk_product_id, quantity, product_price)
						VALUES (orders_id, product_id, 1,(SELECT price_sek FROM product WHERE product.id = product_id));
				SELECT('Message: New product added to order') AS MESSAGE;
				END IF;
			END IF;
		END IF;

	UPDATE product SET stock = (stock) -1
		WHERE product.id = product_id;
	SELECT('Removed 1 from stock');
COMMIT;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS remove_form_cart;
DELIMITER //
CREATE PROCEDURE remove_form_cart (orders_id INT, customer_id INT, product_id INT)
remove_form_cart: BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
		ROLLBACK;
        SELECT('SQLEXCEPTION, changes not saved') AS MESSAGE;
END;
START TRANSACTION;
				-- KOLLAR OM ORDERN INTE FINNS
			IF NOT current_order_exists(orders_id) THEN
				SELECT('Message: No order with that ordernumber') AS MESSAGE;
					LEAVE remove_form_cart;
			-- OM ORDERN FINNS
            ELSE
				-- OM PRODUCTEN FINNS I ORDER
				IF is_product_in_current_order(orders_id, product_id) THEN
					UPDATE orders_product SET quantity = (quantity) - 1
						WHERE fk_orders_id = orders_id AND fk_product_id = product_id;
							SELECT('Message: Removed 1 product') AS MESSAGE;
					UPDATE product SET stock = (stock) + 1
						WHERE product.id = product_id;
				-- OM PRODUCTEN INTE FINNS I ORDER
                ELSE
					SELECT('Message: Couldnt remove product from order') AS MESSAGE;
						LEAVE remove_form_cart;
				END IF;
			END IF;
COMMIT;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS rate;
-- VG SQL
-- Skapa en stored procedure ”Rate” som lägger till ett betyg och en kommentar på en specifik produkt
-- för en specifik kund
DELIMITER //
CREATE PROCEDURE rate(input_customer_id INT, input_product_id INT, input_rating_id INT, input_review_text VARCHAR(100))
rate:BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
		ROLLBACK;
        SELECT('SQLEXCEPTION, changes not saved') AS MESSAGE;
END;
START TRANSACTION;
	IF NOT customer_exists(input_customer_id) THEN
		SELECT 'Customer does not exist in the database' AS ERROR;
			LEAVE rate;
	ELSEIF NOT product_exists(input_product_id) THEN
		SELECT 'Shoe does not exist in the database' AS ERROR;
			LEAVE rate;
	ELSEIF NOT rating_exists(input_rating_id) THEN
		SELECT 'Rating does not exist in the database' AS ERROR;
			LEAVE rate;
	ELSE
		INSERT INTO product_review (fk_product_id,fk_customer_id,fk_rating_id, review) VALUES (input_product_id, input_customer_id, input_rating_id, input_review_text);

	END IF;
COMMIT;
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS discard_order;
DELIMITER //
CREATE PROCEDURE discard_order(_order_id INT)
discard_order:BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
		ROLLBACK;
        SELECT('SQLEXCEPTION, changes not saved') AS MESSAGE;
END;
START TRANSACTION;
	SET @row_num = 0;
	SET @quantity = 0;
	SET @product_id = 0;

	-- RÄKNAR ANTAL RADER I ORDERN
	SELECT count(*) INTO @row_num FROM orders_product WHERE fk_orders_id = _order_id;

	-- LOOPAR IGENOM ALLA RADER I ORDERN
	WHILE @row_num > 0 DO
				SELECT(@row_num) AS MESSAGE;
		-- SELECTAR ANTALET PÅ HUR MÅNGA SKOR AV EN VISS SORT SOM LIGGER PÅ DEN ÖVERSTA RADEN I ORDERN
		SELECT quantity INTO @quantity  FROM orders_product WHERE fk_orders_id = _order_id LIMIT 1;
				SELECT('SQLEXCEPTION, SELECTAR ANTALET') AS MESSAGE;
		-- SELECTAR PRODUCT ID FRÅN DEN ÖVERSTA RADEN
		SELECT fk_product_id INTO @product_id FROM orders_product WHERE fk_orders_id = _order_id LIMIT 1;
				SELECT('SQLEXCEPTION, SELECTAR PRODUCT') AS MESSAGE;
		-- UPPDATERA STOCK FÖR VARAN PÅ ÖVERSTA RADEN
		UPDATE product SET stock = stock + @quantity WHERE product.id = @product_id;
				SELECT('SQLEXCEPTION, UPPDATERA STOCK') AS MESSAGE;
		-- TAR BORT PRODUCTEN MAN UPPDATERAT
		DELETE FROM orders_product WHERE fk_product_id = @product_id AND fk_orders_id = _order_id;
					SELECT('SQLEXCEPTION, TAR BORT PRODUCTEN') AS MESSAGE;
		-- SUBTRAHERA LIST SIZEN MED 1
		SET @row_num = @row_num - 1;
	END WHILE;
-- TAR BORT ORDEN FRÅN KUNDEN
DELETE FROM orders_product WHERE fk_orders_id = _order_id;

COMMIT;
END //
DELIMITER ;